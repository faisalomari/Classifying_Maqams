ANN:
class ANNModel(nn.Module):
    def __init__(self):
        super(ANNModel, self).__init__()

        self.fc1 = nn.Linear(14070, 1024)
        self.bn1 = nn.BatchNorm1d(1024)
        self.dropout1 = nn.Dropout(p=0.2)
        
        self.fc2 = nn.Linear(1024, 512)
        self.bn2 = nn.BatchNorm1d(512)
        self.dropout2 = nn.Dropout(p=0.1)
        
        self.fc3 = nn.Linear(512, 256)
        self.bn3 = nn.BatchNorm1d(256)
        self.dropout3 = nn.Dropout(p=0.1)
        
        self.fc4 = nn.Linear(256, 128)
        self.bn4 = nn.BatchNorm1d(128)
        self.dropout4 = nn.Dropout(p=0.0)
        
        self.fc5 = nn.Linear(128, 64)
        self.bn5 = nn.BatchNorm1d(64)
        self.dropout5 = nn.Dropout(p=0.0)

        self.output_layer = nn.Linear(64, 8)

    def forward(self, x):
        # Flatten the input data to [batch_size, 30 * 469]
        x = x.view(x.size(0), -1)
        
        x = F.relu((self.fc1(x)))
        x = self.bn1(x)
        x = self.dropout1(x)

        x = F.relu((self.fc2(x)))
        x = self.bn2(x)
        x = self.dropout2(x)

        x = F.relu((self.fc3(x)))
        x = self.bn3(x)
        x = self.dropout3(x)

        x = F.relu((self.fc4(x)))
        x = self.bn4(x)
        x = self.dropout4(x)

        x = F.relu((self.fc5(x)))
        x = self.bn5(x)
        x = self.dropout5(x)

        x = self.output_layer(x)
        x = F.softmax(x, dim=1)
        return x

LSTM:
import torch.nn as nn
import torch.nn.functional as F

class MFCC_LSTM2(nn.Module):
    def __init__(self):
        super(MFCC_LSTM2, self).__init__()
        
        self.lstm1 = nn.LSTM(input_size=30, hidden_size=256, num_layers=1, batch_first=True)
        self.dropout1 = nn.Dropout(p=0.2)

        
        self.fc4 = nn.Linear(256, 8)

    def forward(self, x):
        x = torch.transpose(x, 1, 2)
        # Apply the first LSTM layer
        x, _ = self.lstm1(x)
        x = self.dropout1(x)
        
        # Take the last hidden state of the last LSTM layer
        x = x[:, -1, :]
        
        x = self.fc4(x)
        x = F.softmax(x, dim=1)
        
        return x

CNN:
import torch.nn as nn
import torch
import torch.nn.functional as F
from tqdm import tqdm

class MaqamCNN1(nn.Module):
    def __init__(self):
        super(MaqamCNN1, self).__init__()
        
        self.conv1 = nn.Conv2d(in_channels=30, out_channels=36, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm2d(36)
        self.pool1 = nn.MaxPool2d(kernel_size=1, stride=2)
        self.dropout1 = nn.Dropout(p=0.2)
        
        self.conv2 = nn.Conv2d(in_channels=36, out_channels=20, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(20)
        self.pool2 = nn.MaxPool2d(kernel_size=1, stride=2)
        self.dropout2 = nn.Dropout(p=0.1)

        self.fc1 = nn.Linear(8460, 256)
        self.dropout3 = nn.Dropout(p=0.1)

        self.fc2 = nn.Linear(512, 265)
        self.dropout4 = nn.Dropout(p=0.1)

        self.fc3 = nn.Linear(256, 128)
        self.dropout5 = nn.Dropout(p=0.1)

        self.fc4 = nn.Linear(128, 8)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = x.unsqueeze(-1)
        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = self.pool1(x)
        x = self.dropout1(x)
        
        # x = F.relu(self.conv2(x))
        # x = self.bn2(x)
        # x = self.pool2(x)
        # x = self.dropout2(x)
        
        x = x.view(x.size(0), -1)
        
        x = F.relu(self.fc1(x))
        x = self.dropout3(x)
        
        # x = F.relu(self.fc2(x))
        # x = self.dropout4(x)

        x = self.fc3(x)
        x = self.dropout5(x)

        x = self.fc4(x)
        x = F.softmax(x, dim=1)
        return x
